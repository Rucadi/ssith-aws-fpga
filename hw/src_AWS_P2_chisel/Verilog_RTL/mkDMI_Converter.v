//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
// On Sat May  9 13:23:20 EDT 2020
//
//
// Ports:
// Name                         I/O  size props
// blasted_req_valid              O     1
// blasted_req_bits_addr          O     7
// blasted_req_bits_data          O    32
// blasted_req_bits_op            O     2
// blasted_resp_ready             O     1 reg
// RDY_dmi_read_addr              O     1
// dmi_read_data                  O    32
// RDY_dmi_read_data              O     1
// RDY_dmi_write                  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// blasted_req_ready_x            I     1
// blasted_resp_valid_x           I     1
// blasted_resp_bits_data_x       I    32
// blasted_resp_bits_resp_x       I     2
// dmi_read_addr_dm_addr          I     7
// dmi_write_dm_addr              I     7
// dmi_write_dm_word              I    32
// EN_dmi_read_addr               I     1
// EN_dmi_write                   I     1
// EN_dmi_read_data               I     1
//
// Combinational paths from inputs to outputs:
//   (blasted_req_ready_x, EN_dmi_read_addr, EN_dmi_write) -> blasted_req_valid
//   (blasted_req_ready_x,
//    dmi_read_addr_dm_addr,
//    dmi_write_dm_addr,
//    EN_dmi_read_addr,
//    EN_dmi_write) -> blasted_req_bits_addr
//   (blasted_req_ready_x,
//    dmi_write_dm_word,
//    EN_dmi_write) -> blasted_req_bits_data
//   (blasted_req_ready_x, EN_dmi_read_addr, EN_dmi_write) -> blasted_req_bits_op
//   blasted_req_ready_x -> RDY_dmi_read_addr
//   blasted_req_ready_x -> RDY_dmi_write
//   blasted_resp_valid_x -> RDY_dmi_read_data
//   (blasted_resp_bits_data_x, blasted_resp_bits_resp_x) -> dmi_read_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDMI_Converter(CLK,
		       RST_N,

		       blasted_req_ready_x,
		       blasted_req_valid,
		       blasted_req_bits_addr,
		       blasted_req_bits_data,
		       blasted_req_bits_op,
		       blasted_resp_ready,
		       blasted_resp_valid_x,
		       blasted_resp_bits_data_x,
		       blasted_resp_bits_resp_x,

		       dmi_read_addr_dm_addr,
		       EN_dmi_read_addr,
		       RDY_dmi_read_addr,

		       EN_dmi_read_data,
		       dmi_read_data,
		       RDY_dmi_read_data,

		       dmi_write_dm_addr,
		       dmi_write_dm_word,
		       EN_dmi_write,
		       RDY_dmi_write);
  input  CLK;
  input  RST_N;

  //  blasted interface
  input  blasted_req_ready_x;
  output blasted_req_valid;
  output [6 : 0] blasted_req_bits_addr;
  output [31 : 0] blasted_req_bits_data;
  output [1 : 0] blasted_req_bits_op;
  output blasted_resp_ready;
  input  blasted_resp_valid_x;
  input  [31 : 0] blasted_resp_bits_data_x;
  input  [1 : 0] blasted_resp_bits_resp_x;

  // dmi interface
  // action method dmi_read_addr
  input  [6 : 0] dmi_read_addr_dm_addr;
  input  EN_dmi_read_addr;
  output RDY_dmi_read_addr;

  // actionvalue method dmi_read_data
  input  EN_dmi_read_data;
  output [31 : 0] dmi_read_data;
  output RDY_dmi_read_data;

  // action method dmi_write
  input  [6 : 0] dmi_write_dm_addr;
  input  [31 : 0] dmi_write_dm_word;
  input  EN_dmi_write;
  output RDY_dmi_write;

  // signals for module outputs
  wire [31 : 0] blasted_req_bits_data, dmi_read_data;
  wire [6 : 0] blasted_req_bits_addr;
  wire [1 : 0] blasted_req_bits_op;
  wire RDY_dmi_read_addr,
       RDY_dmi_read_data,
       RDY_dmi_write,
       blasted_req_valid,
       blasted_resp_ready;

  // inlined wires
  wire w_req_valid$whas;

  // ports of submodule ff_reading
  wire ff_reading$CLR,
       ff_reading$DEQ,
       ff_reading$D_IN,
       ff_reading$D_OUT,
       ff_reading$EMPTY_N,
       ff_reading$ENQ,
       ff_reading$FULL_N;

  // remaining internal signals
  wire [6 : 0] x_wget__h145;
  wire [1 : 0] x_wget__h285;

  // value method blasted_req_valid
  assign blasted_req_valid = w_req_valid$whas ;

  // value method blasted_req_bits_addr
  assign blasted_req_bits_addr = w_req_valid$whas ? x_wget__h145 : 7'd0 ;

  // value method blasted_req_bits_data
  assign blasted_req_bits_data = EN_dmi_write ? dmi_write_dm_word : 32'd0 ;

  // value method blasted_req_bits_op
  assign blasted_req_bits_op = w_req_valid$whas ? x_wget__h285 : 2'd0 ;

  // value method blasted_resp_ready
  assign blasted_resp_ready = ff_reading$EMPTY_N ;

  // action method dmi_read_addr
  assign RDY_dmi_read_addr = blasted_req_ready_x && ff_reading$FULL_N ;

  // actionvalue method dmi_read_data
  assign dmi_read_data =
	     (blasted_resp_bits_resp_x == 2'd0) ?
	       blasted_resp_bits_data_x :
	       32'hAAAAAAAA ;
  assign RDY_dmi_read_data =
	     ff_reading$EMPTY_N && ff_reading$D_OUT && blasted_resp_valid_x ;

  // action method dmi_write
  assign RDY_dmi_write = blasted_req_ready_x && ff_reading$FULL_N ;

  // submodule ff_reading
  FIFO2 #(.width(32'd1), .guarded(32'd1)) ff_reading(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(ff_reading$D_IN),
						     .ENQ(ff_reading$ENQ),
						     .DEQ(ff_reading$DEQ),
						     .CLR(ff_reading$CLR),
						     .D_OUT(ff_reading$D_OUT),
						     .FULL_N(ff_reading$FULL_N),
						     .EMPTY_N(ff_reading$EMPTY_N));

  // inlined wires
  assign w_req_valid$whas = EN_dmi_read_addr || EN_dmi_write ;

  // submodule ff_reading
  assign ff_reading$D_IN = !EN_dmi_write ;
  assign ff_reading$ENQ = EN_dmi_write || EN_dmi_read_addr ;
  assign ff_reading$DEQ =
	     ff_reading$EMPTY_N && !ff_reading$D_OUT &&
	     blasted_resp_valid_x ||
	     EN_dmi_read_data ;
  assign ff_reading$CLR = 1'b0 ;

  // remaining internal signals
  assign x_wget__h145 =
	     EN_dmi_read_addr ? dmi_read_addr_dm_addr : dmi_write_dm_addr ;
  assign x_wget__h285 = EN_dmi_read_addr ? 2'd1 : 2'd2 ;
endmodule  // mkDMI_Converter
